## Pipeline: https://gitlab.com/gwendal-orinel/docker/pipelines ##  
#     

image: docker:stable   

before_script:
  - apk update && apk add git jq bash curl
  - get_port(){ echo $(((RANDOM%65000)+32000)); }

#after_script:
#  - docker rm -f $(docker ps -aq -f 'name=runner-')

stages:
  - clean
  - build
  - deploy
  - securize
  - publish

services-cloud-o:
  # publish created services
  stage: publish
  tags: 
    - cw-o
  script:
    - docker rm -f my_services_cloud && docker rmi -f gorinel/my_services_cloud
    - docker build my_services_cloud -t gorinel/my_services_cloud
    - export http_ports=$(for host in $(docker ps -q);do docker inspect $host | jq -r 'select(.[].NetworkSettings.Ports["80/tcp"] != null) | .[].NetworkSettings.Ports["80/tcp"][].HostPort' ;done)
    - export https_ports=$(for host in $(docker ps -q);do docker inspect $host | jq -r 'select(.[].NetworkSettings.Ports["443/tcp"] != null) | .[].NetworkSettings.Ports["443/tcp"][].HostPort' ;done)
    - export name_ports=$(for host in $(docker ps -q);do docker inspect $host | jq -r 'select(.[].NetworkSettings.Ports["80/tcp"] != null) | .[].Name' ;done)
    - docker run -d --name=my_services_cloud -h my_services_cloud -v certbot:/var/certbot --restart=always -e http_ports="$http_ports" -e https_ports="$https_ports" -e name_ports="$name_ports" -p 80:80 -p 8080:443 gorinel/my_services_cloud
    - docker exec my_services_cloud bash -c 'source /var/create_html.sh > /var/www/html/index.php'
    - docker exec my_services_cloud bash -c 'source /var/create_vhosts.sh > /etc/apache2/sites-available/000-default.conf'
    - docker exec my_services_cloud bash -c 'source /var/create_ssl_vhosts.sh > /etc/apache2/sites-available/default-ssl.conf'
    - docker restart my_services_cloud
  only:
    variables:
      - $CI_COMMIT_MESSAGE =~ /update-services-cloud/
      
services-cloud-p:
  # publish created services
  stage: publish
  tags: 
    - cw-p
  script:
    - docker rm -f my_services_cloud && docker rmi -f gorinel/my_services_cloud
    - docker build my_services_cloud -t gorinel/my_services_cloud
    - export http_ports=$(for host in $(docker ps -q);do docker inspect $host | jq -r 'select(.[].NetworkSettings.Ports["80/tcp"] != null) | .[].NetworkSettings.Ports["80/tcp"][].HostPort' ;done)
    - export https_ports=$(for host in $(docker ps -q);do docker inspect $host | jq -r 'select(.[].NetworkSettings.Ports["443/tcp"] != null) | .[].NetworkSettings.Ports["443/tcp"][].HostPort' ;done)
    - export name_ports=$(for host in $(docker ps -q);do docker inspect $host | jq -r 'select(.[].NetworkSettings.Ports["80/tcp"] != null) | .[].Name' ;done)
    - docker run -d --name=my_services_cloud -h my_services_cloud -v certbot:/var/certbot --restart=always -e http_ports="$http_ports" -e https_ports="$https_ports" -e name_ports="$name_ports" -p 80:80 -p 8080:443 gorinel/my_services_cloud
    - docker exec my_services_cloud bash -c 'source /var/create_html.sh > /var/www/html/index.html'
    - docker exec my_services_cloud bash -c 'source /var/create_vhosts.sh > /etc/apache2/sites-available/000-default.conf'
    - docker exec my_services_cloud bash -c 'source /var/create_ssl_vhosts.sh > /etc/apache2/sites-available/default-ssl.conf'
    - docker restart my_services_cloud
  only:
    variables:
      - $CI_COMMIT_MESSAGE =~ /update-services-cloud/
 
clean-o:
  # publish created services
  stage: clean
  tags: 
    - cw-o
  script:
    - docker rm -f $(docker ps -aq | grep -v $(docker ps -aq -f 'name=gitlab-runner')) || true
  only:
    variables:
      - $CI_COMMIT_MESSAGE =~ /clean-o/
      
clean-p:
  # publish created services
  stage: clean
  tags: 
    - cw-p
  script:
    - docker rm -f $(docker ps -aq | grep -v $(docker ps -aq -f 'name=gitlab-runner')) || true
  only:
    variables:
      - $CI_COMMIT_MESSAGE =~ /clean-p/
      

#### --test-cert flag for testing
certbot-renew:
  stage: securize
  tags:
    - gitlab-org-docker
    - cw-p
  image: 
    name: certbot/dns-ovh
    entrypoint: ['']
  script:
    - echo -e "dns_ovh_endpoint = ovh-eu \ndns_ovh_application_key = $OVH_APP_KEY \ndns_ovh_application_secret = $OVH_APP_SECRET \ndns_ovh_consumer_key = $OVH_CONSU_KEY" > /ovh.ini && chmod 600 /ovh.ini
    - certbot certonly --dns-ovh --dns-ovh-credentials /ovh.ini --agree-tos --force-renewal --work-dir /tmp --logs-dir cert/logs --config-dir cert -d "*.orinel.net" --no-bootstrap --manual-public-ip-logging-ok --preferred-challenges dns-01 --register-unsafely-without-email --server https://acme-v02.api.letsencrypt.org/directory -d *.orinel.net
  artifacts:
    name: "certificats-orinel"
    expire_in: 90 days
    paths:
    -  cert/archive/orinel.net/
  cache:
    key: certbot
    paths:
    - cert/
  environment:
    name: certbot
  only:
    variables:
      - $CERTBOT_RENEW

certbot-update-pages:
  stage: publish
  tags:
    - gitlab-org-docker
    - cw-p
  script:
    - chmod +x certbot/update-pages.sh
    - ./certbot/update-pages.sh
  environment:
    name: certbot
  cache:
    key: certbot
    paths:
    - cert/
    policy: pull
  only:
    variables:
      - $CERTBOT_RENEW
      - $CERTBOT_UPDATE
 
apache-php:
  stage: deploy
  tags:
    - cw-p
  script:
    - docker rm -f apache-php && docker rmi -f gorinel/apache-php
    - docker build apache-php -t gorinel/apache-php
    - docker run -d --name=apache-php -h apache-php -p $(get_port):80 -p $(get_port):443 --restart=always gorinel/apache-php
  only:
    variables:
      - $CI_COMMIT_MESSAGE =~ /update-apache-php/
      
webhook:
  stage: deploy
  tags:
    - cw-p
  script:
    - docker rm -f webhook && docker rmi -f gorinel/webhook
    - docker build webhook -t gorinel/webhook
    - docker run -d --name=webhook -h webhook -p $(get_port):80 -p $(get_port):443 --restart=always gorinel/webhook
  only:
    variables:
      - $CI_COMMIT_MESSAGE =~ /update-webhook/
      
folio:
  stage: deploy
  tags:
    - cw-p
  before_script:
    - if [ -z "$(docker ps -aq -f 'name=mysql')" ];then docker run --restart always --name mysql -e MYSQL_ROOT_PASSWORD=$BDD_PASS -v mysql:/var/lib/mysql -d mysql:5.7 mysqld --innodb-buffer-pool-size=20M ;fi
  script:
    - docker rm -f folio && docker rmi -f gorinel/folio
    - docker build folio -t gorinel/folio
    - docker run -d --link mysql --name=folio -h folio -p $(get_port):80 -p $(get_port):443 -e bdd_user=$BDD_USER -e bdd_pass=$BDD_PASS -e bdd_host=mysql --restart=always gorinel/folio
    - docker exec folio bash -c 'echo -e "export BDD_USER=\"$bdd_user\"\nexport BDD_PASS=\"$bdd_pass\"\nexport BDD_HOST=\"$bdd_host\"" >> /etc/apache2/envvars'
    - docker restart folio 
    - docker cp folio/folio.sql mysql:/tmp/
    - docker exec mysql bash -c 'mysql -h localhost -u root -p$MYSQL_ROOT_PASSWORD < /tmp/folio.sql'
  only:
    variables:
      - $CI_COMMIT_MESSAGE =~ /update-folio/
      
ctf:
  stage: deploy
  tags:
    - cw-o
  before_script:
    - if [ -z "$(docker ps -aq -f 'name=mysql')" ];then docker run --restart always --name mysql -e MYSQL_ROOT_PASSWORD=$BDD_PASS -v mysql:/var/lib/mysql -d mysql:5.7 ;fi
  script:
    - docker rm -f ctf && docker rmi -f gorinel/ctf
    - docker build ctf -t gorinel/ctf
    - docker run -d --link mysql --name=ctf -h ctf -p $(get_port):80 -p $(get_port):443 -e bdd_user=$BDD_USER -e bdd_pass=$BDD_PASS -e bdd_host=mysql --restart=always gorinel/ctf
    - docker exec ctf bash -c 'echo -e "export BDD_USER=\"$bdd_user\"\nexport BDD_PASS=\"$bdd_pass\"\nexport BDD_HOST=\"$bdd_host\"" >> /etc/apache2/envvars'
    - docker restart ctf
    - wget -O /tmp/backupsql.sql https://github.com/MSIR2018/CFI-CTF/raw/master/Docker/Host/Data/backupsql.sql
    - docker cp /tmp/backupsql.sql mysql:/tmp/ 
    - docker exec mysql bash -c 'mysql -h localhost -u root -p$MYSQL_ROOT_PASSWORD < /tmp/backupsql.sql'
  only:
    variables:
      - $CI_COMMIT_MESSAGE =~ /update-ctf/      
      
nextcloud:
  stage: deploy
  tags:
    - cw-o
  script:
    - docker rm -f nextcloud && docker rmi -f nextcloud
    - docker run -d --name=nextcloud -h nextcloud -p $(get_port):80 -p $(get_port):443 -v nextcloud:/data --restart=always ownyourbits/nextcloudpi-x86 cloud.orinel.net
  only:
    variables:
      - $CI_COMMIT_MESSAGE =~ /update-nextcloud/
      
 
