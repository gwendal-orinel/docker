image: docker:stable

before_script:
  - apk update && apk add git jq
  - get_port(){ echo $(((RANDOM%65000)+32000)); }

#after_script:
#  - docker rm -f $(docker ps -aq -f 'name=runner-')

stages:
  - deploy
  - publish

services-cloud:
  # publish created services
  stage: publish
  tags: 
    - runner1
  script:
    - docker rm -f my_services_cloud && docker rmi -f gorinel/my_services_cloud
    - docker build my_services_cloud -t gorinel/my_services_cloud
    - export http_ports=$(for host in $(docker ps -q);do docker inspect $host | jq -r 'select(.[].NetworkSettings.Ports["80/tcp"] != null) | .[].NetworkSettings.Ports["80/tcp"][].HostPort' ;done)
    - export https_ports=$(for host in $(docker ps -q);do docker inspect $host | jq -r 'select(.[].NetworkSettings.Ports["443/tcp"] != null) | .[].NetworkSettings.Ports["443/tcp"][].HostPort' ;done)
    - export name_ports=$(for host in $(docker ps -q);do docker inspect $host | jq -r 'select(.[].NetworkSettings.Ports["80/tcp"] != null) | .[].Name' ;done)
    - docker run -d --name=my_services_cloud -h my_services_cloud -v certbot:/var/certbot --restart=always -e http_ports="$http_ports" -e https_ports="$https_ports" -e name_ports="$name_ports" -p 80:80 -p 8080:443 gorinel/my_services_cloud
    - docker exec my_services_cloud bash -c 'source /var/create_html.sh > /var/www/html/index.html'
    - docker exec my_services_cloud bash -c 'source /var/create_vhosts.sh > /etc/apache2/sites-available/000-default.conf'
    - docker exec my_services_cloud bash -c 'source /var/create_ssl_vhosts.sh > /etc/apache2/sites-available/default-ssl.conf'
    - docker restart my_services_cloud
  only:
    variables:
      - $CI_COMMIT_MESSAGE =~ /update/
 
apache-php:
  stage: deploy
  tags:
    - runner1
  script:
    - docker rm -f apache-php && docker rmi -f gorinel/apache-php
    - docker build apache-php -t gorinel/apache-php
    - docker run -d --name=apache-php -h apache-php -p $(get_port):80 -p $(get_port):443 --restart=always gorinel/apache-php
  only:
    variables:
      - $CI_COMMIT_MESSAGE =~ /update-apache-php/
      
folio:
  stage: deploy
  tags:
    - runner1
  script:
    - docker rm -f folio && docker rmi -f gorinel/folio
    - docker build folio -t gorinel/folio
    - docker run -d --link mysql --name=folio -h folio -p $(get_port):80 -p $(get_port):443 -e bdd_user=$BDD_USER -e bdd_pass=$BDD_PASS -e bdd_host=mysql --restart=always gorinel/folio
    - docker exec folio bash -c 'echo -e "export BDD_USER=\"$bdd_user\"\nexport BDD_PASS=\"$bdd_pass\"\nexport BDD_HOST=\"$bdd_host\"" >> /etc/apache2/envvars'
    - docker restart folio 
    - docker cp folio/folio.sql mysql:/tmp/
    - docker exec mysql bash -c 'mysql -h localhost -u root -p$MYSQL_ROOT_PASSWORD < /tmp/folio.sql'
  only:
    variables:
      - $CI_COMMIT_MESSAGE =~ /update-folio/
      
nextcloud:
  stage: deploy
  tags:
    - runner1
  script:
    - docker rm -f nextcloud && docker rmi -f nextcloud
    - docker run -d --name=nextcloud -h nextcloud -p $(get_port):80 -v nextcloud:/var/www/html --restart=always nextcloud
  only:
    variables:
      - $CI_COMMIT_MESSAGE =~ /update-nextcloud/
      
